#include<iostream>
using namespace std;

// a node of the doubly linked list
struct node
{
  int data;
  node *next;
  node *prev;
};
node*head; //global
struct node*Getnewnode(int x)  //function to make a new node
{node*newnode=new node;        //allocating memory for new node
newnode->data=x;
newnode->prev=NULL;
newnode->next=NULL;
return newnode;
}

void insert_at_head(int x)
{node*newnode=Getnewnode(x);
   if(head==NULL)
   {head=newnode;
   return;
   }
head->prev=newnode;
newnode->next=head;
head=newnode;
}

void print_forward()
{node*temp=head;
  while(temp!=NULL)
  {cout<<temp->data;
   temp=temp->next;
  }
cout<<endl;
}

void print_reverse()
{node*temp=head;
if(temp=NULL)
return;
while(temp->next!=NULL)
{temp=temp->next;
}
while(temp!=NULL)
{cout<<temp->data;
temp=temp->prev;
}
cout<<endl;
}

void delete_a_node(node*head,node*del)
{
 if(head==NULL || del==NULL) 
 return;
 if(head==del)
 head=del->next;
 
   if(del->prev != NULL)              //if del is not first node
    del->prev->next = del->next;    
   if(del->next != NULL)             // if del is not last node
      del->next->prev = del->prev;
      
delete del; //memory is freed
return;
}

int main()
{
	head=NULL; // doubly linked list is empty now
	insert_at_head(9);   //9
	insert_at_head(7);   //79
	insert_at_head(5);   //579
	insert_at_head(1);	 //1579
	insert_at_head(2);   //21579
	insert_at_head(0);   //021579
	delete_a_node(head,head->next);
	print_forward();              //01579
	print_reverse();              //97510
	
return 0;
}
